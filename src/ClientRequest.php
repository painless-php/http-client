<?php

namespace PainlessPHP\Http\Client;

use PainlessPHP\Http\Client\Contract\ResponseMiddleware;
use PainlessPHP\Http\Message\HeaderCollection;
use PainlessPHP\Http\Message\Method;
use PainlessPHP\Http\Message\Request;
use PainlessPHP\Http\Message\Uri;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;

/**
 * A http request sent via the HTTP client, acts as a container for more
 * functionality than what is provided by psr-7
 *
 * This class contains the middleware for both request and the following
 * response in order to make requests client agnostic. This allows the user
 * to send multiple asynchronous requests generated by different API clients at
 * once using any client.
 *
 */
class ClientRequest extends Request
{
    /**
     * Middlewares applied to response for this request
     *
     */
    private ResponseMiddlewareStack $responseMiddlewareStack;

    /**
     * Request settings
     *
     */
    private RequestSettings $settings;

    /**
     * Attributes provided a method for storing arbitrary data in a request
     *
     */
    private array $attributes;

    /**
     * Create a new request instance
     *
     */
    public function __construct(
        Method|string $method,
        Uri|UriInterface|string|null $uri = null,
        mixed $body = null,
        HeaderCollection|array $headers = [],
        RequestSettings|array $settings = [],
        ResponseMiddlewareStack|array $responseMiddlewareStack = [],
        array $attributes = []
    ) {
        parent::__construct($method, $uri, $body, $headers);
        $this->setSettings($settings);
        $this->setResponseMiddlewareStack($responseMiddlewareStack);
        $this->attributes = $attributes;
    }

    public static function createFromRequest(RequestInterface $request) : ClientRequest
    {
        return new ClientRequest(
            $request->getMethod(),
            $request->getUri(),
            $request->getBody(),
            $request->getHeaders()
        );
    }

    private function setSettings(RequestSettings|array $settings)
    {
        if(is_array($settings)) {
            $settings = RequestSettings::createFromArray($settings);
        }
        $this->settings = $settings;
    }

    private function setResponseMiddlewareStack(ResponseMiddlewareStack|array $stack)
    {
        if(is_array($stack)) {
            $stack = ResponseMiddlewareStack::createFromArray($stack);
        }
        $this->responseMiddlewareStack = $stack;
    }

    /**
     * Get the request settings
     *
     */
    public function getSettings() : RequestSettings
    {
        return $this->settings;
    }

    /**
     * Create new instance with the given settings
     *
     */
    public function withSettings(RequestSettings|array $settings) : self
    {
        $instance = $this->clone();
        $instance->setSettings($settings);
        return $instance;
    }

    /**
     * Get the response middlewares
     *
     */
    public function getResponseMiddlewareStack() : ResponseMiddlewareStack
    {
        return $this->responseMiddlewareStack;
    }

    /**
     * Create a new instance with the given middleware
     *
     */
    public function withResponseMiddleware(ResponseMiddleware $middleware) : self
    {
        $instance = $this->clone();
        $instance->responseMiddlewareStack = $this->responseMiddlewareStack
            ->withAdditionalMiddleware($middleware);
        return $instance;
    }

    public function hasAttribute(string $name) : bool
    {
        return array_key_exists($name, $this->attributes);
    }

    public function getAttribute(string $name, mixed $default = null) : mixed
    {
        return $this->attributes[$name] ?? $default;
    }

    public function getAttributes() : array
    {
        return $this->attributes;
    }

    public function withAttributes(array $attributes) : static
    {
        $instance = $this->clone();
        $instance->attributes = $attributes;
        return $instance;
    }

    public function withAdditionalAttributes(array $additional) : static
    {
        $instance = $this->clone();
        $instance->attributes = array_merge($this->attributes, $additional);
        return $instance;
    }
}
