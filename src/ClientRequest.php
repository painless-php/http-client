<?php

namespace PainlessPHP\Http\Client;

use PainlessPHP\Http\Client\Contract\ResponseMiddleware;
use PainlessPHP\Http\Message\HeaderCollection;
use PainlessPHP\Http\Message\Method;
use PainlessPHP\Http\Message\Request;
use PainlessPHP\Http\Message\Uri;
use Psr\Http\Message\UriInterface;

/**
 * A http request sent via the HTTP client, acts as a container for more
 * functionality than what is provided by psr-7
 *
 * This class contains the middleware for both request and the following
 * response in order to make requests client agnostic. This allows the user
 * to send multiple asynchronous requests generated by different API clients at
 * once using any client.
 *
 */
class ClientRequest extends Request
{
    /**
     * Middlewares applied to response for this request
     *
     */
    protected ResponseMiddlewareStack $responseMiddlewares;

    /**
     * Request settings
     *
     */
    protected RequestSettings $settings;

    /**
     * Create a new request instance
     *
     */
    public function __construct(
        Method|string $method,
        Uri|UriInterface|string|null $uri = null,
        mixed $body = null,
        HeaderCollection|array $headers = [],
        RequestSettings|array $settings = [],
        ResponseMiddlewareStack|array $responseMiddlewares = []
    ) {
        parent::__construct($method, $uri, $body, $headers);
        $this->setSettings($settings);
        $this->setResponseMiddlewares($responseMiddlewares);
    }

    private function setSettings(RequestSettings|array $settings)
    {
        if(is_array($settings)) {
            $settings = RequestSettings::createFromArray($settings);
        }
        $this->settings = $settings;
    }

    private function setResponseMiddlewares(ResponseMiddlewareStack|array $middlewares)
    {
        if(is_array($middlewares)) {
            $middlewares = ResponseMiddlewareStack::createFromArray($middlewares);
        }
        $this->responseMiddlewares = $middlewares;
    }

    /**
     * Get the request settings
     *
     */
    public function getSettings() : RequestSettings
    {
        return $this->settings;
    }

    /**
     * Create new instance with the given settings
     *
     */
    public function withSettings(RequestSettings|array $settings) : self
    {
        $instance = $this->clone();
        $instance->setSettings($settings);
        return $instance;
    }

    /**
     * Get the response middlewares
     *
     */
    public function getResponseMiddlewares() : ResponseMiddlewareStack
    {
        return $this->responseMiddlewares;
    }

    /**
     * Create a new instance with the given middleware
     *
     */
    public function withResponseMiddleware(ResponseMiddleware $middleware) : self
    {
        $instance = $this->clone();
        $instance->responseMiddlewares = $this->responseMiddlewares->withAdditionalMiddleware($middleware);
        return $instance;
    }
}
